componentWillMount()


执行场景：
在render（）方法之前

详解：
因为componentWillMount是在render之前执行，所以在这个方法中setState不会发生重新渲染

这是服务端渲染中唯一调用的钩子函数

通常情况下，使用constructor（）方法代替




render（）


执行场景
在componentWillMount()方法之后

在componentWillReceive(nextProps,nextState)方法之后



componentDidMount()


执行场景：
在render（）方法之后


详解：
这个方法会在render（）之后立即执行

这里可以对DOM进行操作，这个函数之后虚拟DOM被渲染进真实DOM中，可以使用ref调用真实DOM节点

这里可以加载服务器数据，并且如果使用了redux之类的数据服务，这里可以出发加载服务器数据的action

这里可以使用setState（）方法触发重新渲染



componentWillReceiveProps(nextProps)

执行场景：
在已经挂载的组件接收到新的props时触发

简单理解是在除了第一次生命周期之后的生命周期中触发


详解：
如果你需要在props发生变化，或者说新传入的props来更新state，可能需要比较 this.props和nextProps，然后使用this.setState（）方法来改变this.state



shouldComponentUpdate(nextProps,nextState)

执行场景：
在接收到新的props或者state的时候，或者说在componentWillReceiveProps(nextProps)后触发

详解：
在接收新的props或者state时确定是否发生重新渲染，默认情况返回true，表示会发生重新渲染


tips：
这个这个方法在首次渲染时或者forceUpdate（）时不会触发

这个方法如果返回false，那么props或者state发生改变的时候会阻止子组件发生重新渲染；

目前，如果shouldComponentUpdate（nextProps,nextState）返回false，那么componentWilUpdate(nextProps,nextState),render(),componentDidUpdate()都不会被触发；











两种生命周期

1.组件初始化

原因：

组件第一次建立


触发：

componentWillMount->render->componentDidMount



2.组件更新--props change

原因：

props发生改变


触发：

componentWillReceiveProps->shouldComponentUpdate->componentWillUpdate->componentDidUpdate




3.组件更新--state change

原因：

this.setState()使state发生改变

触发：
shouldComponentUpdate->componentWillUpdate->componentDidUpdate




4.组件卸载或销毁

原因：

组件卸载或者销毁

触发：
componentWillUnmount



